
https://leetcode.com/problems/burst-balloons/ Paired with question below. Total time 90 minutes.
312. Burst Balloons
You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.
If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.
Return the maximum coins you can collect by bursting the balloons wisely.

Example 1:
Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167

Example 2:
Input: nums = [1,5]
Output: 10

Constraints:
    n == nums.length
    1 <= n <= 300
    0 <= nums[i] <= 100

public int MaxCoins(int[] nums) {

        if(nums.Length == 0)
        return 0;

        if(nums.Length == 1)
        return nums[0];

        List<int> VirtualSet = nums.ToList(); //Adding virtual beginning and end.
                                              //This is seen in instruction as begin and end ballon with value 1
        VirtualSet.Insert(0,1);
        VirtualSet.Add(1);
        int n = VirtualSet.Count;
        int[][] mem = new int[n][];
        nums = VirtualSet.ToArray();
        
        for(int i=0;i<mem.Length;i++)
        {
            mem[i] = new int[n];
            for(int j=0;j<mem[i].Length;j++)
            {
                mem[i][j] = -1;
            }
        }

    int result = MCM(nums,1,n-1,mem);
    return result;
    }

public int MCM(int[] nums,int left,int right,int[][] mem)
    {
        if(left>=right)
        return 0;

        if(mem[left][right] != -1)
        return mem[left][right];

        int maxCost =  int.MinValue;
        for(int k=left;k<right;k++)
        {
            int totalCost = MCM(nums,left,k,mem) + MCM(nums,k+1,right,mem)+nums[left-1] * nums[k] * nums[right];
            maxCost = Math.Max(totalCost,maxCost); 
            mem[left][right] = maxCost;
        }

        return maxCost;
    }

https://leetcode.com/problems/sum-of-number-and-its-reverse/
2443. Sum of Number and Its Reverse

Given a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.

Example 1:
Input: num = 443
Output: true
Explanation: 172 + 271 = 443 so we return true.

Example 2:
Input: num = 63
Output: false
Explanation: 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false.

Example 3:
Input: num = 181
Output: true
Explanation: 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros.

Constraints:
    0 <= num <= 105

